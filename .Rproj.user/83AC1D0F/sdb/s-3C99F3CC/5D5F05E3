{
    "collab_server" : "",
    "contents" : "\n\nmod_vis_clust_2_data = function(rea_clust){\n  \n  reactive({\n    rea_clust()$data\n  })\n}\n\nmod_vis_groups_ui = function(rea_data, selected = NULL){\n  \n  renderUI({\n    \n    categoricals = rea_data()$categoricals\n    \n    if(is.null(selected)) selected = categoricals[1]\n    \n    inputPanel(\n      \n      selectInput('group_var_vis_gr'\n                  , 'Select Grouping Variable'\n                  , choices  = categoricals\n                  , selected = selected)\n    \n    , checkboxInput('group_show_legend'\n                    , 'Show Legend'\n                    , value = F)  \n        \n    , sliderInput('group_vis_plot_height_num'\n                   , 'Adjust Plot Height Numericals'\n                   , min = 100\n                   , max = 2000\n                   , value = 600)\n    \n    , sliderInput('group_vis_plot_height_cat'\n                   , 'Adjust Plot Height Categoricals'\n                   , min = 100\n                   , max = 2000\n                   , value = 600)\n    \n    )\n    \n  })\n}\n\nmod_vis_groups_render_numericals = function(input, rea_data, boxcox = F, color_pallette = NULL){\n  \n\n  renderPlot(   height = function(){\n    \n         input$group_vis_plot_height_num\n         \n    },   expr ={\n    \n      \n    if (boxcox == T){\n      numericals = rea_data()$boxcox\n      tit = 'Median values of scaled, centered\\nand boxcox-transformed numeric variables'\n    } else{\n      numericals  = rea_data()$numericals\n      tit = 'Median values of scaled and centered\\nnumeric variables'\n    }  \n    \n    data        = rea_data()$data\n    group_var   = input$group_var_vis_gr\n    \n    facet_formula = paste0('~',group_var) %>%\n      as.formula()\n\n    # plot numericals scaled values\n    \n    d_plot_scale = data %>%\n      select( one_of(numericals) ) %>%\n      scale(center = T) %>%\n      as_tibble() %>%\n      bind_cols( data[,group_var]) %>%\n      gather(key = 'key', value = 'value', one_of(numericals) )\n    \n    medians = d_plot_scale %>%\n      group_by_('key', group_var) %>%\n      summarize_all( median )\n    \n    \n    p =ggplot(medians, aes(x = as.factor(key)\n                        , y = value) ) +\n      geom_bar( aes( fill = as.factor(key))\n                ,stat = 'identity') +\n      geom_hline(yintercept = 0\n                 ,size = 1) +\n      facet_wrap(facet_formula\n                 , ncol = 1 ) +\n      labs(title = tit)+\n      theme(axis.text.x = element_text(angle = 90)\n      )\n    \n    if( input$group_show_legend == F ){\n      \n      p = p +\n        theme( legend.position = 'none')\n    }\n    \n    if( ! is.null(color_pallette) ){\n      \n      p = p +\n        ggplot2::scale_fill_manual( values = color_pallette)\n      \n    }\n    \n    name = stringr::str_c( input$sql_or_lib,'_groupvis_numerical')%>%\n      stringr::str_c( input$group_var_vis_gr )%>%\n      stringr::str_c( 'h',input$group_vis_plot_height_num )\n      \n      save_plot(plot = p\n                , path = input$path\n                , name = name\n                , yes = input$save\n                , excel = input$save_excel\n                )\n    return(p)\n  \n  })\n    \n\n}\n\nmod_vis_groups_render_categoricals = function(input, rea_data, color_pallette = NULL){\n  \n  renderPlot(   height = function(){\n    \n                  input$group_vis_plot_height_cat\n                  \n                },   expr ={\n    \n    data          = rea_data()$data\n    group_var     = input$group_var_vis_gr\n    categoricals  = rea_data()$categoricals %>%\n      .[! . == group_var]\n    \n    facet_formula = paste0('~',group_var) %>%\n      as.formula()\n    \n\n    d_plot = data %>%\n      as_tibble() %>%\n      select( one_of( c(categoricals, group_var) ) ) %>%\n      gather(key = 'key', value = 'value', one_of(categoricals) )\n    \n    # to preserve factor order we have to add a sorting column\n    \n    d_order = data %>%\n      as_tibble() %>%\n      select( one_of( c(categoricals, group_var) ) )%>%\n      mutate_all( as.integer ) %>%\n      gather(key = 'key', value = 'order', one_of(categoricals) ) %>%\n      mutate( order = stringr::str_c(key, order) )\n    \n    d_plot = d_plot %>%\n      bind_cols( select(d_order, order) )%>%\n      arrange( order ) %>%\n      # we have to convert value to factor here\n      # ggplot will mess up the order if some \n      # facet groups dont have all levels()\n      mutate( value = forcats::as_factor(value))\n    \n    p = ggplot(d_plot ) +\n      geom_bar( aes( x = forcats::as_factor(value)\n                     , y = ..prop..\n                     , fill = key\n                     , group = key)\n      )+\n      facet_wrap(facet_formula\n                 ,ncol = 1)+\n      labs(title = 'Percentages for each level of each categorical variable',\n           fill = 'factors')+\n      theme(axis.text.x = element_text(angle = 90)\n            )\n    \n    if(input$group_show_legend == F){\n      \n      p = p +\n        theme( legend.position = 'none')\n    }\n    \n    if( ! is.null(color_pallette) ){\n      \n      p = p +\n        ggplot2::scale_fill_manual( values = color_pallette)\n      \n    }\n    \n    name = stringr::str_c( input$sql_or_lib,'_groupvis_categorical')%>%\n      stringr::str_c( input$group_var_vis_gr ) %>%\n      stringr::str_c( 'h',input$group_vis_plot_height_cat )\n      \n    save_plot(plot = p\n              , path = input$path\n              , name = name\n              , yes = input$save\n              , excel = input$save_excel\n              )\n    \n    return(p)\n  \n  })\n}\n\nmod_vis_groups_render_no_obs = function(input, rea_data, color_pallette = NULL){\n  \n  \n  renderPlot({\n    \n    group_var     = input$group_var_vis_gr\n    data          = rea_data()$data\n    \n    data[,group_var] = forcats::as_factor(data[[group_var]])\n\n    p = ggplot(data, aes_string(x = group_var\n                          , fill = group_var)\n          ) +\n      geom_bar(show.legend = F)\n    \n    if( ! is.null(color_pallette) ){\n      \n      p = p +\n        ggplot2::scale_fill_manual( values = color_pallette)\n      \n    }\n    \n    return(p)\n    \n  })\n}\n",
    "created" : 1504846102232.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3103428780",
    "id" : "5D5F05E3",
    "lastKnownWriteTime" : 1504847140,
    "last_content_update" : 1504847140610,
    "path" : "C:/Users/erbla/OneDrive/R/multiview_som/mod_vis_groups_v03.R",
    "project_path" : "mod_vis_groups_v03.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}