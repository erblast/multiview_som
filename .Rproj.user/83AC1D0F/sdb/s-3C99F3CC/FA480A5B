{
    "collab_server" : "",
    "contents" : "\nrequire(shiny)\n\n\nmod_trans_som_rea = function(rea_ana){\n  \n  reactive({\n    \n    withProgress(message = 'Preparing Data for SOM Map'\n                 ,{\n    \n      data          = rea_ana()$data\n      numericals    = rea_ana()$numericals\n      boxcox        = rea_ana()$boxcox\n      categoricals  = rea_ana()$categoricals\n    \n      \n      data_list = list()\n      distances = vector()\n      \n      if( ! is.null(categoricals) ){\n      \n        for (fac in categoricals){\n          \n          data_list[[fac]] = kohonen::classvec2classmat( data[[fac]] )\n          \n          distances = c(distances, 'tanimoto')\n          \n          incProgress( 1/length(categoricals) )\n          \n        }\n      } else {\n        \n        distances    = NULL\n        categoricals = NULL\n        \n      }\n      \n      data_list[['numericals']] = scale(data[,boxcox])\n      distances = c( distances, 'euclidean')\n    \n    })\n    \n    return( list(data_list      = data_list\n                 ,distances     = distances\n                 , numericals   = numericals\n                 , boxcox       = boxcox\n                 , categoricals = categoricals))\n      \n  })\n  \n}\n\nmod_train_map_som_rea = function(rea_trans_som\n                                 , rea_clean\n                                 , input\n                                 , status){\n  \n  eventReactive({input$but_train_map\n                 input$checkbox_use_uploaded_map\n                 }\n               ,{ \n    \n    if(input$checkbox_use_uploaded_map == T) {\n      \n      status$map_trained = 'Using Loaded Map'\n        \n      return(NULL)   \n    }         \n                 \n    start_time = lubridate::now()\n    \n    withProgress( message = paste('map training started at', start_time)\n                  ,{\n     \n    \n      data_list     = rea_trans_som()$data_list\n      numericals    = rea_trans_som()$numericals\n      categoricals  = rea_trans_som()$categoricals\n      distances     = rea_trans_som()$distances\n      \n      # setting user weights leads to asynchoneous training of the map\n      # see documentation \n      # weights = c( length(numericals), rep( 1, length(categoricals) ) )\n      \n      som_grid = kohonen::somgrid(xdim   = input$map_dim_a\n                               , ydim = input$map_dim_b\n                               , topo =\"hexagonal\")\n      \n      if( ! is.null(categoricals) ){\n        whatmap = c(categoricals, 'numericals')\n      } else{\n        whatmap = 'numericals'\n      }\n      \n      m = kohonen::supersom( data_list\n                          , grid=som_grid\n                          , rlen= input$n_iter\n                          , alpha = 0.05\n                          , whatmap = whatmap\n                          , dist.fcts = distances\n                          #, user.weights = weights\n                          #, maxNA.fraction = .5\n                        )\n    \n    })\n    \n    end_time = lubridate::now()\n    \n    out_str = paste('Map training took'\n                    , difftime(end_time, start_time, units = 'mins') %>%\n                      round(1)\n                    ,'min')\n    \n    status$map_trained = out_str\n    \n    \n    trained_som = list(data   = rea_clean()\n                       , map  = m\n                       , grid = som_grid)\n    \n    return( trained_som )\n    \n  })\n\n}\n\n\n\nmod_som_map_ui = function(){\n  \n  inputPanel(\n    \n    numericInput('map_dim_a'\n                    ,label = 'Map Dimension a'\n                    , min = 5\n                    , max = 1000\n                    , value = 20\n                    , step = 1)\n    \n    ,numericInput('map_dim_b'\n                   ,label = 'Map Dimension b'\n                   , min = 5\n                   , max = 1000\n                   , value = 20\n                   , step = 1)\n    \n    ,numericInput('n_iter'\n                   ,label = 'No of training iterations'\n                   , min = 5\n                   , max = 100000\n                   , value = 500\n                   , step = 1)\n    \n    ,fileInput('upload_map'\n               , label = 'Upload Map')\n    \n    \n    ,checkboxInput('checkbox_use_uploaded_map'\n                   ,label = 'Use uploaded map'\n                   #,value = F\n                  )\n\n    ,actionButton('but_train_map'\n                 ,label = 'Train map'\n    )\n  )\n  \n}\n\n\nmod_som_map_exec_time_out = function(rea_trans_som, input, status){\n  \n  # we are using two different reactive functions\n  # not to trigger the recalculation if only no of\n  #training iterations are changed\n  \n  rea_time = reactive({\n    \n    withProgress(message = 'Estimating training time'\n                 ,{\n      \n      n_test_iterations = 5\n      \n      data_list     = rea_trans_som()$data_list\n      numericals    = rea_trans_som()$numericals\n      categoricals  = rea_trans_som()$categoricals\n      distances     = rea_trans_som()$distances\n      \n      som_grid = kohonen::somgrid(xdim   = input$map_dim_a\n                                  , ydim = input$map_dim_b\n                                  , topo =\"hexagonal\")\n      \n      t_before = lubridate::now()\n      \n      if( ! is.null(categoricals) ){\n        whatmap = c(categoricals, 'numericals')\n      } else{\n        whatmap = 'numericals'\n      }\n\n      m = kohonen::supersom( data_list\n                             , grid=som_grid\n                             , rlen= n_test_iterations\n                             , alpha = 0.05\n                             , whatmap = whatmap\n                             , dist.fcts = distances\n                             #, maxNA.fraction = .5\n      )\n      \n      t_after = lubridate::now()\n      \n      t_diff = difftime(t_after,t_before, units = 'mins') %>%\n        as.numeric()\n      \n      return(t_diff)\n    })\n    \n  })\n\n  reactive({\n    \n    t_diff = rea_time()\n    \n    out_str = paste('Map will take approximately'\n                    , round(t_diff * input$n_iter/5,1)\n                    , 'min to train')\n    \n    status$est_exec_time = out_str\n    \n  })\n    \n  \n  \n  \n}\n\nmod_save_map_som_rea = function(rea_trained_som\n                                , input\n                                , status\n                                ){\n  dat = lubridate::now() %>%\n    lubridate::date()%>%\n    as.character()%>%\n    stringr::str_replace_all('-','')\n  \n  f_save = function(file){\n    \n    withProgress( message = 'saving map'\n                 ,{\n    \n      save_list = rea_trained_som()\n      save( save_list, file = file)\n    \n    })\n    \n  }\n  \n  file_name = stringr::str_c('som_map_'\n                             ,dat,\n                             '.Rdata')\n  \n  #in a markdown document no downloadButton needs to be\n  #created. outputArgs takes kwargs for the layout \n  #of the button, however the outputID is aumatically\n  #assigned in this case dont pass it in outputArgs.\n  \n  \n  inputPanel(\n  \n    downloadHandler(filename  =  file_name\n                    , content = f_save\n                    , outputArgs = list(label = 'Save Map'))\n  \n  )\n  \n}\n\n\nmod_load_map_rea = function(rea_som_trained\n                            , input\n                            , status){\n  \n  reactive({\n    \n     som = rea_som_trained()\n    \n    if( input$checkbox_use_uploaded_map == T \n        & !is.null(input$upload_map) ) {\n      \n      print('loading_map')\n      \n      load(input$upload_map$datapath)\n      \n      if(!'save_list' %in% ls()\n         & ! 'map' %in% names(save_list)\n         & ! 'data' %in% names(save_list)\n         & ! 'grid' %in% names(save_list)){\n        \n        stop('corrupted map uploaded')\n      }\n      \n      som = save_list\n      \n      status$map_loaded = 'Map Loaded'\n    }\n  \n    return(som)  \n    \n  })\n  \n\n}\n\nmod_som_map_plot = function(input, rea_som){\n  \n  tagList(\n    \n    renderPlot({\n      \n      m = rea_som()$map\n      plot(m, type=\"changes\")\n      \n    })\n    \n    , renderPlot({\n      \n      m = rea_som()$map\n      plot(m, type=\"counts\", shape = 'straight')\n      \n    }, width = 1024, height = 768)\n    \n    , renderPlot({\n      \n      m = rea_som()$map\n      plot(m, type=\"dist.neighbours\", shape = 'straight')\n    }, width = 1024, height = 768)\n    \n    , renderPlot({\n      \n      m = rea_som()$map\n      plot(m, type=\"quality\", shape = 'straight')\n    }, width = 1024, height = 768)\n    \n    , renderUI({\n      \n      selectInput('codes'\n                  , label = 'Select Map Layer'\n                  , choices = names( rea_som()$m$codes )\n      )\n      \n    })\n    \n    , renderPlot({\n      \n      m = rea_som()$m\n      whatmap = input$codes\n      \n      if( length(whatmap) == 1 ){\n        whatmap = NULL\n      }\n      \n      plot(m\n           , type = 'codes'\n           , whatmap = whatmap\n           , shape = 'straight'\n      )\n      \n    }, width = 1024, height = 768 )\n    \n  )\n  \n  \n}",
    "created" : 1504800295071.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "536730567",
    "id" : "FA480A5B",
    "lastKnownWriteTime" : 1504803639,
    "last_content_update" : 1504803639094,
    "path" : "C:/Users/erbla/OneDrive/R/multiview_som/mod_som_map_v02.R",
    "project_path" : "mod_som_map_v02.R",
    "properties" : {
        "docOutlineSize" : "202.37792135275794",
        "docOutlineVisible" : "1",
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}