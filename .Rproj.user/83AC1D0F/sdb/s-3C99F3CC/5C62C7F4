{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Multiview SOM\"\nauthor: \"OEB\"\ndate: \"May 16, 2017\"\noutput:\n  html_document:\n    code_folding: hide\n    df_print: paged\n    number_sections: yes\n    theme: sandstone\n    toc: yes\n    toc_depth: 3\n    toc_float:\n      collapsed: no\n      smooth_scroll: no\nruntime: shiny\nparams:\n  data: !r ISLR::Auto\n  data_input: TRUE\n---\n\n<style>\n  .main-container {\n    max-width: 1920px !important;\n  }\n</style>\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, eval = TRUE)\n```\n\n\n\n```{r libraries, echo=FALSE, message=FALSE, warning=FALSE}\n\nlibrary(knitr)\nlibrary(ISLR)\nlibrary(tabplot)\nlibrary(tidyverse)\nlibrary(tabplot)\nlibrary(randomForest)\nlibrary(stringr)\nlibrary(GGally)\nlibrary(forcats)\nlibrary(caret)\nlibrary(kohonen)\nlibrary(Amelia)\nlibrary(e1071)\n\n# setwd(\"C:/Users/erbla/OneDrive/R/multiview shiny\")\n\nqual_col_pals  = RColorBrewer::brewer.pal.info[RColorBrewer::brewer.pal.info$category == 'qual',]\ncolor_pallette = unlist(mapply(RColorBrewer::brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))\n\n\n\nsource( stringr::str_c(getwd(),'/mod_load_data v03.R') )\n\nsource( stringr::str_c(getwd(),'/mod_summary v02.R') )\n\nsource( stringr::str_c(getwd(), '/mod_clean_data v05.R') )\n\nsource( stringr::str_c(getwd(), '/mod_som_map_v02.R') )\n\nsource( stringr::str_c(getwd(), '/mod_som_cluster_v02.R') )\n\nsource( stringr::str_c(getwd(), '/mod_vis_groups_v03.R') )\n\nsource( stringr::str_c(getwd(), '/mod_tree_v03.R') )\n\nsource( stringr::str_c(getwd(), '/mod_save_v01.R') )\n\n\n```\n\n```{r reactive_values}\n\n# this creates an object like input, that can store multiple\n# reactive values, this object stores values which we will use\n# to signal if certain calculations or processes are finished\n# and how often they were run\n\nstatus = reactiveValues( data = NULL)\n\nstatus$load     = 'No Data loaded. Select Data and Press Load button!'\nstatus$summary        = NULL\nstatus$clean          = NULL\nstatus$ana            = NULL\nstatus$som            = NULL\nstatus$est_exec_time  = NULL\nstatus$map_trained    = NULL\nstatus$map_loaded     = NULL\nstatus$pca      = 'Ready'\nstatus$imp      = 'Ready'\nstatus$corr     = 'Ready'\nstatus$group_stat = 'Ready'\nstatus$tree     = 'Ready'\n\n\n\nrenderText(status$load)\nrenderText(status$summary)\nrenderText(status$clean)\nrenderText(status$ana)\nrenderText(status$som)\nrenderText(status$est_exec_time)\nrenderText(status$map_trained)\nrenderText(status$map_loaded)\n#renderText(status$tree)\n\n\n```\n\n#Background\n\nFor a more detailed explanation of the code go to this [post](http://rpubs.com/erblast/SOM), which outlines the concept of this app\n\n#Data\n\n## Load Data\n\n```{r load, eval = params$data_input == TRUE}\n\n# load two ui_elements and the save_plot() function\n# and the rea_load reactive element which returns \n# the data\n\nmod_load_data_ui()\n\nrea_load = mod_load_rea(input, status)\n\nrenderText( status$load )\n\n```\n\n```{r external_load, eval= params$data_input == FALSE}\n\ndata = params$data\n\nrea_load = reactive({\n  \n  data\n  \n})\n\n\n```\n\n\n## Clean Data\n\n```{r clean}\n\nmod_clean_ui(rea_load)\n\nrenderText( status$clean )\n\nrea_clean = mod_clean_rea(input, status, rea_load)\n\n```\n\n## Summary\n\n```{r summary , eval = T}\n\nmod_summary_ui(rea_clean)\n\n```\n\n## Start Analysis\n\n```{r ana}\n\nmod_ana_ui(rea_clean, select_grouping_var = F)\n\nrenderText( status$ana )\n\nrea_ana   = mod_ana_rea(input, status, rea_clean)\n\n```\n\n\n# SOM\n\n##Train Map\n\nBoxcox-transformed values are used by default\n\n```{r train_map}\n\nrea_trans_som = mod_trans_som_rea(rea_ana)\n\n\nmod_som_map_ui()\n\nmod_som_map_exec_time_out(rea_trans_som\n                          , input\n                          , status)\n\n\nrea_trained_som = mod_train_map_som_rea(rea_trans_som\n                                        , rea_clean\n                                        , input\n                                        , status)\n\n\nrenderText(\n  status$est_exec_time\n)\n\nrenderText(\n  status$map_trained\n)\n\nrenderText(\n  status$map_loaded\n)\n\n\nmod_save_map_som_rea(rea_trained_som\n                     ,input\n                     ,status\n                     )\n\n\nrea_som = mod_load_map_rea(rea_trained_som\n                           , input\n                           , status)\n\n\n\n```\n\n\n##Expand Map\n\n##Vis Map\n\n```{r}\n\nmod_som_map_plot(input, rea_som)\n\n\n```\n\n\n##Cluster Map\n\n```{r}\n\nrea_dist = mod_som_cluster_dist( rea_som )\n\n```\n\n\n###Optimal No Cluster\n\n```{r}\nmod_som_cluster_opt_no_clust( input, rea_dist )\n\n```\n\n\n###Cluster\n\n```{r}\n\nmod_som_cluster_ui(input)\n\nrea_clust = mod_som_cluster_rea(input\n                               , status\n                               , rea_som\n                               , rea_dist\n                               )\nrenderText(status$clust)\n\nmod_som_cluster_man_change_cluster_UI( input )\n\nrea_clust_mod = mod_som_cluster_man_change_cluster_rea( input, rea_clust )\n\n\nmod_som_cluster_plot(input\n                     , rea_clust_mod\n                     , rea_som)\n\n\nrenderPrint(rea_clust()$clust)\nrenderPrint(rea_clust_mod()$clust)\n\n```\n\n##Vis Clusters\n\n```{r}\n\nrea_new_data = mod_som_clust_2_data(rea_clust_mod)\n\nmod_vis_groups_ui(rea_new_data, 'cluster')\n\nmod_vis_groups_render_no_obs(input, rea_new_data, color_pallette = color_pallette)\n\nmod_vis_groups_render_numericals(input, rea_new_data, color_pallette = color_pallette)\n\nmod_vis_groups_render_categoricals(input, rea_new_data, color_pallette = color_pallette)\n\n```\n\n##Tree\n\n```{r}\n\nmod_tree_UI(input, status, rea_new_data )\n\nrea_tree = mod_tree_rea(input, status, rea_new_data)\n\nmod_tree_plot(input, status, rea_tree)\n\nmod_tree_UI_plot()\n\nmod_tree_prune_plot(input, rea_tree, rea_new_data)\n\n\n```\n\n\n#Save Clusters\n\n```{r}\n\nmod_save(input, rea_new_data)\n\n```\n\n\n\n\n\n",
    "created" : 1502861127078.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4232381448",
    "id" : "5C62C7F4",
    "lastKnownWriteTime" : 1505195433,
    "last_content_update" : 1505195433799,
    "path" : "C:/Users/erbla/OneDrive/R/multiview_som/multiview_som_v02.Rmd",
    "project_path" : "multiview_som_v02.Rmd",
    "properties" : {
        "docOutlineSize" : "231.7577586168193",
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}