},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui, server)
}
require(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
downloadLink("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
downloadLink("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
save(data, file)
}
)
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
downloadLink("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
print(file)
save(data, file = file)
}
)
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
downloadLink("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
file_name = paste("data-", Sys.Date(), ".csv", sep="")
print(file_name)
return(file_name)
},
content = function(file) {
print(file)
save(data, file = file)
}
)
}
shinyApp(ui, server)
}
load("C:\\Users\\erbla\\Desktop\\downloadData")
remove(data)
load("C:\\Users\\erbla\\Desktop\\downloadData")
remove(data)
load("C:\\Users\\erbla\\Desktop\\downloadData")
remove(data)
load("C:\\Users\\erbla\\Desktop\\downloadData")
?save
load("C:\\Users\\erbla\\Desktop\\downloadData")
load("C:\\Users\\erbla\\Desktop\\downloadData")
remove(data)
load("C:\\Users\\erbla\\Desktop\\downloadData")
load("C:\\Users\\erbla\\Desktop\\downloadData")
remove(data)
load("C:\\Users\\erbla\\Desktop\\downloadData")
remove(data)
load("C:\\Users\\erbla\\Desktop\\downloadData")
remove(data)
load("C:\\Users\\erbla\\Desktop\\downloadData")
load("C:\\Users\\erbla\\Desktop\\downloadData")
load("C:\\Users\\erbla\\Desktop\\saved_map.Rdata")
?fileInput
?eventReactive()
?observeEvent()
?eventReactive()
?reactiveVal()
finished = reactiveValues( data = NULL)
finished$load     = 0
finished$summary  = 0
finished$clean    = 0
finished$ana      = 0
finished$som      = 0
NULL + 1
NULL + 2
?ifelse()
finished$asdf
is.null(finished$asdf)
load('test_download.Rdata')
load('test_save_map.Rdata')
save_list$rea_map()
require(shiny)
?fileInput
'rea_map' %in% save_list
names(save_list)
'rea_map' %in% names(save_list)
globalVariables()
globalenv()
local()
ls()
load("C:/Users/erbla/OneDrive/R/multiview_som/test_save_map.Rdata")
load(test_save_map)
remove(save_list)
load("C:/Users/erbla/OneDrive/R/multiview_som/test_save_map.Rdata")
plot(save_list$rea_map)
plot(save_list$rea_map())
load("C:/Users/erbla/OneDrive/R/multiview_som/map_data.Rdata")
plot(save_list$saved_map)
plot(NULL)
?fileInput
remove(save_list)
load("C:/Users/erbla/OneDrive/R/multiview_som/map_data.Rdata")
load("C:/Users/erbla/OneDrive/R/multiview_som/trained_map.Rdata")
m = save_list$map
codes = tibble( layers = names(m$codes)
,codes = m$codes ) %>%
mutate( codes = purrr::map(codes, as_tibble) ) %>%
spread( key = layers, value = codes) %>%
apply(1, bind_cols) %>%
.[[1]] %>%
as_tibble()
require(tidyverse)
codes = tibble( layers = names(m$codes)
,codes = m$codes ) %>%
mutate( codes = purrr::map(codes, as_tibble) ) %>%
spread( key = layers, value = codes) %>%
apply(1, bind_cols) %>%
.[[1]] %>%
as_tibble()
codes = tibble( layers = names(m$codes)
,codes = m$codes )
codes
save_list$data
save_list$data$numericals
save_list$data$boxcox
save_list$data$data_list
m$codes
load("C:/Users/erbla/OneDrive/R/multiview_som/trained_map.Rdata")
m = save_list$map
m$codes
RColorBrewer::brewer.pal.info
qual_col_pals = RColorBrewer::brewer.pal.info %>%
select( category == 'qual')
qual_col_pals = RColorBrewer::brewer.pal.info
qual_col_pals
qual_col_pals = RColorBrewer::brewer.pal.info %>%
filter( category == 'qual')
qual_col_pals = RColorBrewer::brewer.pal.info %>%
filter( category == 'qual') %>%
unnest( category )
qual_col_pals
brewer.pal
RColorBrewer::brewer.pal()
RColorBrewer::brewer.pal.info
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
pallette = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
qual_col_pals = RColorBrewer::brewer.pal.info[brewer.pal.info$category == 'qual',]
pallette = unlist(mapply(RColorBrewer::brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
library(RColorBrewer)
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,n), col=sample(col_vector, n))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
qual_col_pals = RColorBrewer::brewer.pal.info[brewer.pal.info$category == 'qual',]
pallette = unlist(mapply(RColorBrewer::brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
qual_col_pals = RColorBrewer::brewer.pal.info[RColorBrewer::brewer.pal.info$category == 'qual',]
pallette = unlist(mapply(RColorBrewer::brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
load("C:/Users/erbla/OneDrive/R/multiview_som/trained_map.Rdata")
load("C:/Users/erbla/OneDrive/R/multiview_som/trained_map.Rdata")
save_list$data
save_list$data$categoricals
save_list$data$categoricals[-'clarity']
select( save_list$data$categoricals, -clarity)
save_list$data$categoricals[ !save_list$data$categoricals %in% 'clarity']
save_list$data$categoricals[ !save_list$data$categoricals == 'clarity']
?shiny::reactive
?shiny::renderPlot
?kohonen:::plot.kohcodes
?kohonen::som()
?kohonen::som
source( stringr::str_c(getwd(),'/mod_load_data v03.R') )
?renderPlot
knitr::opts_chunk$set(echo = TRUE, warning = F, cache = F, error = T)
load('som.Rdata')
m$codes
names( m$codes )
plot(m, type = 'codes', whatmap = 'color')
plot(m, type = 'codes', whatmap = 4)
par(mfrow = c(5,1))
plot(m, type = 'codes')
?par
?gridExtra::grid.arrange
p = plot(m, type = 'codes', whatmap = 1)
?dev.copy
plot(m)
par(mfrow = c(1,1))
plot(m)
plot(m, whatmap = 1)
p = recordPlot()
plot(m, whatmap = 2)
p
par(mfrow = c(1,1))
plot(m, whatmap = 1)
p1 = recordPlot()
plot(m, whatmap = 2)
p2 = recordPlot()
l = (p1,p2)
gridExtra::grid.arrange( l , ncol = 1)
l = (p1,p2)
l = list(p1,p2)
gridExtra::grid.arrange( l , ncol = 1)
gridExtra::grid.arrange( p1, p2 , ncol = 1)
library(grid)
library(gridGraphics)
install.packages('gridGraphics')
plot(m, whatmap = 1)
gridGraphics::grid.echo()
p1 = gridGraphics::grid.grab()
p1 = grid::grid.grab()
plot(m, whatmap = 1)
gridGraphics::grid.echo()
p1 = grid::grid.grab()
plot(m, whatmap = 2)
gridGraphics::grid.echo()
p2 = grid::grid.grab()
gridExtra::grid.arrange( p1, p2 , ncol = 1)
gridExtra::grid.arrange( l , ncol = 1)
l = list(p1,p2)
gridExtra::grid.arrange( l , ncol = 1)
plot(m, whatmap = 1)
gridGraphics::grid.echo()
p1 = grid::grid.grab()
plot(m, whatmap = 2)
gridGraphics::grid.echo()
p2 = grid::grid.grab()
l = list(p1,p2)
gridExtra::grid.arrange( l , ncol = 1)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot( plotlist = l)
# like this we can save base plots as a variable but
# we cannot arrange them on a grid
par(mfrow = c(1,1))
plot(m, whatmap = 1)
p1 = recordPlot()
plot(m, whatmap = 2)
p2 = recordPlot()
l_p = list(p1,p2)
gridExtra::grid.arrange( p1, p2 , ncol = 1)
# like this we can arrange them on a grid, but grid extra does not
# accept them as a list
plot(m, whatmap = 1)
gridGraphics::grid.echo()
p1 = grid::grid.grab()
plot(m, whatmap = 2)
gridGraphics::grid.echo()
p2 = grid::grid.grab()
gridExtra::grid.arrange( p1, p2, ncol = 1)
l_g = list(p1,p2)
gridExtra::grid.arrange( l , ncol = 1)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot( plotlist = l_p )
multiplot( plotlist = l_g)
multiplot( plotlist = l_p , cols = 1)
gridExtra::grid.arrange( p1, p2 , ncol = 1)
m$codes
names(m$codes)
multiplot( plotlist = l_p )
multiplot( plotlist = l_g)
multiplot( plotlist = l_p )
load('save_data.Rdata')
id_cols = NULL
none_ids      = names(data)[ ! names_data %in% id_cols ]
none_ids      = names(data)[ ! names(data) %in% id_cols ]
numericals    = none_ids[ map_lgl( data[, none_ids], is.numeric)]
require(tidyverse)
require(stringr)
require(caret)
require(forcats)
numericals    = none_ids[ map_lgl( data[, none_ids], is.numeric)]
categoricals  = none_ids[ ! map_lgl( data[, none_ids], is.numeric)]
all_variables = none_ids
f_call_multiview = function(data = ISLR::OJ){
rmarkdown::run(file = 'multiview_v07.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v07.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = data
, data_input = FALSE
)
)
)
}
f_call_tree = function(data = ISLR::OJ){
rmarkdown::run(file = 'mod_tree.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'mod_tree.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = data
)
)
)
}
f_call_som = function(data = ISLR::OJ){
rmarkdown::run(file = 'multiview_som_v01.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_som_v01.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = data
)
)
)
}
f_call_multiview = function(data = ISLR::OJ){
rmarkdown::run(file = 'multiview_v07.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v07.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = data
, data_input = FALSE
)
)
)
}
f_call_tree = function(data = ISLR::OJ){
rmarkdown::run(file = 'mod_tree.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'mod_tree.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = data
)
)
)
}
f_call_som = function(data = ISLR::OJ){
rmarkdown::run(file = 'multiview_som_v01.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_som_v01.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = data
, data_input = FALSE
)
)
)
}
f_call_som(ggplot2::diamonds )
source( stringr::str_c(getwd(),'/mod_load_data v03.R') )
source( stringr::str_c(getwd(),'/mod_summary v02.R') )
source( stringr::str_c(getwd(), '/mod_clean_data v04.R') )
source( stringr::str_c(getwd(), '/mod_clean_data v05.R') )
source( stringr::str_c(getwd(), '/mod_som_map_v01.R') )
source( stringr::str_c(getwd(), '/mod_som_cluster_v01.R') )
source( stringr::str_c(getwd(), '/mod_vis_groups_v02.R') )
source( stringr::str_c(getwd(), '/mod_tree_v02.R') )
source( stringr::str_c(getwd(), '/mod_save_v01.R') )
source( stringr::str_c(getwd(),'/mod_load_data v03.R') )
source( stringr::str_c(getwd(),'/mod_summary v02.R') )
source( stringr::str_c(getwd(), '/mod_clean_data v05.R') )
source( stringr::str_c(getwd(), '/mod_som_map_v01.R') )
source( stringr::str_c(getwd(), '/mod_som_cluster_v01.R') )
source( stringr::str_c(getwd(), '/mod_vis_groups_v02.R') )
source( stringr::str_c(getwd(), '/mod_tree_v02.R') )
source( stringr::str_c(getwd(), '/mod_save_v01.R') )
f_call_som = function(data = ISLR::OJ){
rmarkdown::run(file = 'multiview_som_v01.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_som_v01.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = data
, data_input = FALSE
)
)
)
}
f_call_som()
'a' + 'b' + NULL
'a' + 'b'
1+2+3+NULL
is.null( 1+2+3+NULL )
c( NULL, 5)
load('trained_map.Rdata')
map = save_list$map
codes = map$codes
codes
codes = names( map$codes )
codes
whatmap = codes[1]
plot(map, whatmap = whatmap)
length(map$codes)
5 > NULL
if ( 5 > NULL) print('a')
update.packages()
